import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus

# üî¥ –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ –∫–∞–Ω–∞–ª
BOT_TOKEN = "8172354164:AAFEeTSHw577ok5gGxC2v-Sq54bsilM3vNE"
CHANNEL_ID = "@taina_goroskop"

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç
predictions = {
    "card_1": "‚ú® –í–∞—Å –∂–¥—ë—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç —Å—É–¥—å–±—ã...",
    "card_2": "üîÆ –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–Ω–∞–∫–∞–º –í—Å–µ–ª–µ–Ω–Ω–æ–π...",
    "card_3": "üåü –°–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏..."
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_choices = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ä—Ç
keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîÆ –ö–∞—Ä—Ç–∞ ‚Ññ1", callback_data="card_1")],
    [InlineKeyboardButton(text="üîÆ –ö–∞—Ä—Ç–∞ ‚Ññ2", callback_data="card_2")],
    [InlineKeyboardButton(text="üîÆ –ö–∞—Ä—Ç–∞ ‚Ññ3", callback_data="card_3")]
])

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        user_status = await bot.get_chat_member(CHANNEL_ID, user_id)
        return user_status.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except:
        return False  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data.startswith("card_"))
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_subscription(user_id):
        await bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å üëâ @taina_goroskop, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.")
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–æ—Ä —Ä–∞–Ω–µ–µ
    if user_id in user_choices:
        await bot.send_message(user_id, "‚ö†Ô∏è –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É! –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –Ω–µ–ª—å–∑—è.")
        await callback_query.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_choices[user_id] = callback_query.data

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    prediction = predictions.get(callback_query.data, "–û—à–∏–±–∫–∞.")
    await bot.send_message(user_id, f"‚ú® –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction}")

    await callback_query.answer()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ä—Ç —Å—É–¥—å–±—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ! –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è.\n\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
        reply_markup=keyboard
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())